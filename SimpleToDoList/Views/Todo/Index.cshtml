
@{
    var title = ViewBag.Title;
    @model IEnumerable<SimpleToDoList.Models.ToDoItem>
}
<!DOCTYPE html>
<html>
    <head>

        <meta name="viewport" content="width=device-width, initial-scale=1.0, length=device-length" />

        <title>@title</title>
        <link rel="stylesheet" href="~/css/Todo/Index.css">
    </head>
    <body>
        <div class="title">
            <h3>
                @title
            </h3>
        </div>
        <div class="container-form">
            <form id="createForm" class="form">
                <div id="text">
                    <input type="text" id="Name" name="Name" placeholder="Task Name..."/>
                </div>
                <div id="description">
                    <textarea id="Description" name="Description" placeholder="Task Description..."></textarea>
                </div>
                <div id="button">
                    <button id="FormButton" type="button" onclick="createItem()">Add</button>
                </div>
                
            </form>
        </div>
        <div id="resultMessage"></div>
        <div class="container-item">
            @foreach(var item in Model){
                <div class="box-item">
                    <div id="item-name">@item.Name</div>
                    <div id="item-date">📅@item.DateCreated.ToString("d MMMM, yyyy")</div>
                    <div id="item-description">@item.Description</div>
                    <div id="item-state" class="@(item.IsComplete ? "Finished" : "Unfinished")">
                        @(item.IsComplete ? "Finished" : "Unfinished")
                    </div>
                    <div style="height: 2em;"></div>
                        <div class="action-button">
                            <div>
                                <button class="button" type="button" onclick="changeStatus(@item.ToDoId)">@(item.IsComplete ? "Unfinish" : "Finish")</button>
                            </div>
                            <div>
                                <button class="button" type="button" data-id="@item.ToDoId" data-name="@item.Name" data-desc="@item.Description" onclick="openModal(this)">Edit</button>
                            </div>
                            <div>
                                <button class="button" type="button" onclick="deleteItem(@item.ToDoId)">Delete</button>
                            </div>
                        </div>
                    </div>
            }
        </div>
    </body>
    <div id="modalWindow" class="modal">
        <div class="modal-content">
            <span class="close-button" onclick="closeModal()">&times;</span>
            <h2>Edit Item</h2>
            <input type="hidden" id="edit-id" />
            <div>
                <label>Name:</label>
                <input type="text" id="edit-name" />
            </div>
            <div>
                <label>Description:</label>
                <textarea id="edit-description"></textarea>
            </div>
            <button onclick="saveChanges()">Save</button>
        </div>
    </div>
</div>
</html>

<script>
    function changeStatus(id) {
        fetch('/Todo/ChangeStatus/' + id, {
            method: 'PUT'
            
        })
        console.log(id)
        .then(response => {
            if (response.redirected) {
                window.location.href = response.url;
            }
        });
    }
        function deleteItem(id) {
        fetch('/Todo/DeleteItem/' + id, {
            method: 'DELETE'
        })
        .then(response => {
            if (response.redirected) {
                window.location.href = response.url;
            }
        });
    }
    function editView(id){
        fetch('/Todo/EditView/' + id, {
            method:'GET'
        })
        .then(response => {
            if(response.url){
                window.location.href = response.url;
            }
        });
    }
    function createItem() {
        const nameInput = document.getElementById("Name");
        const descriptionInput = document.getElementById("Description");
        const resultMessage = document.getElementById("resultMessage");

        const name = nameInput.value.trim();
        const description = descriptionInput.value.trim();

        if (name === "" || description === "") {
            resultMessage.textContent = "Please fill out both fields.";
            return;
        }

        const item = {
            Name: name,
            Description: description
        };

        fetch("/Todo/CreateItem", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify(item)
        })
        .then(response => {
            if (response.redirected) {
                window.location.href = response.url;
            } else {
                return response.text().then(errorText => {
                    console.error("Error:", errorText);
                    resultMessage.textContent = "Error: " + errorText;
                });
            }
        })
        .catch(error => {
            console.error("Error:", error.message);
            resultMessage.textContent = "Error: " + error.message;
        });
    }

    function openModal(button) {
        const id = button.getAttribute("data-id");
        const name = button.getAttribute("data-name");
        const desc = button.getAttribute("data-desc");

        console.log("Opening modal with:", {id, name, desc});

        document.getElementById("edit-id").value = id;
        document.getElementById("edit-name").value = name;
        document.getElementById("edit-description").value = desc;
        document.getElementById("modalWindow").style.display = "block";
    }

    function saveChanges() {
        const updatedData = {
            ToDoId: document.getElementById("edit-id").value,
            Name: document.getElementById("edit-name").value,
            Description: document.getElementById("edit-description").value
        };
        console.log("Sending to backend:", updatedData);
        console.log("JSON payload:", JSON.stringify(updatedData));

        fetch(`/ToDo/EditItem/`, {
            method: "PUT",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify(updatedData)
        })
        .then(response => {
            if (response.ok) {
                location.reload(); // refresh page to see updated data
            } else {
                alert(response.statusText);
            }
        });
    }

    function closeModal() {
        document.getElementById("modalWindow").style.display = "none";
    }

    window.onclick = function(event) {
        const modal = document.getElementById("modalWindow");
        if (event.target === modal) {
            modal.style.display = "none";
        }
    }
</script>